# -*- coding: utf-8 -*-
"""
/***************************************************************************
 rasterize_polygonize
                                 A QGIS plugin
 A plugin that can perform rasterize and polygonize operations with a single tool.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-08
        git sha              : $Format:%H$
        copyright            : (C) 2024 by halukhndstn
        email                : halukhndstn@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog

from qgis.PyQt.QtWidgets import QApplication, QMainWindow, QToolButton, QVBoxLayout, QWidget, QMenu, QAction, QComboBox, QMessageBox
from qgis.gui import QgsMapLayerComboBox, QgsFileWidget, QgsFileWidget
from qgis.utils import reloadPlugin, startPlugin

from qgis.core import *
import processing
import json

from .converters.tiff2csv import TIFFToCSVConverter 
from .converters.csv2tiff import CSVToGeoTIFFConverter

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .rasterize_polygonize_dialog import rasterize_polygonizeDialog
import os.path

class rasterize_polygonize:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface

        self.WIDTH = None
        self.HEIGHT = None

        self.ras_pol_dialog = rasterize_polygonizeDialog()
        self.iface = iface
        
        self.ras_pol_dialog.outputUnitComboBox.insertItems(0, ["Pixels"])
        self.ras_pol_dialog.outputUnitComboBox.insertItems(1, ["Georeferenced units"])
        
        
        self.ras_pol_dialog.inputLayerComboBox.setFilters(QgsMapLayerProxyModel.VectorLayer)
        
        self.ras_pol_dialog.inputRasterLayerComboBox.setFilters(QgsMapLayerProxyModel.RasterLayer)
        
        self.ras_pol_dialog.menu = QMenu()
        self.ras_pol_dialog.calculate_from_layer_menu = QMenu("Calculate from Layer", self.iface.mainWindow())
        self.ras_pol_dialog.menu.addMenu(self.ras_pol_dialog.calculate_from_layer_menu)
        
        use_map_canvas_extent_action = QAction("Use Map Canvas Extent", self.ras_pol_dialog.menu)
        
        self.ras_pol_dialog.outputExtentToolButton.setMenu(self.ras_pol_dialog.menu)
        self.ras_pol_dialog.menu.addAction(use_map_canvas_extent_action)
        
        use_map_canvas_extent_action.triggered.connect(self.use_map_canvas_extent_function)

        self.ras_pol_dialog.outputFileWidget.setFilter("TIFF Files (*.tiff);; TIF Files (*.tif);; All Files (*)")
        self.ras_pol_dialog.outputVectorFileWidget.setFilter("SHP Files (*.shp);; GPKG files (*.gpkg);; All Files (*)")

        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'rasterize_polygonize_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Rasterize-Polygonize')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('rasterize_polygonize', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """
        icon_path = os.path.join(os.path.dirname(__file__), "icon.png")

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/rasterize_polygonize/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Rasterize-Polygonize'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Rasterize-Polygonize'),
                action)
            self.iface.removeToolBarIcon(action)

    def reset_widgets(self):
        self.ras_pol_dialog.tabWidget.setCurrentIndex(0) 
        self.ras_pol_dialog.inputFieldComboBox.setEnabled(False)
        
        self.ras_pol_dialog.inputLayerComboBox.setCurrentIndex(-1)
        self.ras_pol_dialog.inputRasterLayerComboBox.setCurrentIndex(-1)
        self.ras_pol_dialog.inputFieldComboBox.setCurrentIndex(-1)
        self.ras_pol_dialog.inputRasterBandComboBox.setCurrentIndex(-1)

        self.ras_pol_dialog.inputLayerComboBox.setCurrentText(None)
        self.ras_pol_dialog.fieldUseCheckBox.setChecked(False)
        self.ras_pol_dialog.burnValueDSpinBox.setValue(0)
        self.ras_pol_dialog.useZCheckBox.setChecked(False)
        self.ras_pol_dialog.outputUnitComboBox.setCurrentIndex(0)
        self.ras_pol_dialog.horizontalResDSpinBox.setValue(0)
        self.ras_pol_dialog.verticalResDSpinBox.setValue(0)
        self.ras_pol_dialog.outputExtentLineEdit.clear()
        self.ras_pol_dialog.resTextEdit.clear()
        self.ras_pol_dialog.noDataDSpinBox.setValue(0)
        self.ras_pol_dialog.invertCheckBox.setChecked(False)
        self.ras_pol_dialog.allTouchedCheckBox.setChecked(False)
        self.ras_pol_dialog.outputFileWidget.setFilePath(None)
        self.ras_pol_dialog.openOutputCheckBox.setChecked(False)
        
        self.ras_pol_dialog.originXLineEdit.clear()
        self.ras_pol_dialog.originYLineEdit.clear()
        self.ras_pol_dialog.pixelSizeXLineEdit.clear()
        self.ras_pol_dialog.pixelSizeYLineEdit.clear()
        self.ras_pol_dialog.epsgCodeLineEdit.clear()
        self.ras_pol_dialog.tiffUseCheckBox.setChecked(False)
        self.ras_pol_dialog.openTiffCheckBox.setChecked(False)
        self.ras_pol_dialog.openTiffCheckBox.setEnabled(False)

        self.ras_pol_dialog.csvUploadCheckBox.setChecked(False)
        self.ras_pol_dialog.csvFileLineEdit.clear()
        self.ras_pol_dialog.csvWidthLineEdit.clear()
        self.ras_pol_dialog.csvHeightLineEdit.clear()
        self.ras_pol_dialog.tiffUseCheckBox.setChecked(False)
        
        # self.ras_pol_dialog.tiff2csvPushButton.setEnabled(False)
        
        self.ras_pol_dialog.csvUploadCheckBox.setChecked(False)
        self.ras_pol_dialog.csvFileLineEdit.setEnabled(False)
        self.ras_pol_dialog.csvFileToolButton.setEnabled(False)
        self.ras_pol_dialog.csvHeightLabel.setEnabled(False)
        self.ras_pol_dialog.csvWidthLabel.setEnabled(False)
        self.ras_pol_dialog.csvWidthLineEdit.setEnabled(False)
        self.ras_pol_dialog.csvHeightLineEdit.setEnabled(False)
        self.ras_pol_dialog.xValueLabel.setEnabled(False)
        self.ras_pol_dialog.yValueLabel.setEnabled(False)
        self.ras_pol_dialog.originXLineEdit.setEnabled(False)
        self.ras_pol_dialog.originYLineEdit.setEnabled(False)
        self.ras_pol_dialog.pixelSizeXLabel.setEnabled(False)
        self.ras_pol_dialog.pixelSizeYLabel.setEnabled(False)
        self.ras_pol_dialog.pixelSizeXLineEdit.setEnabled(False)
        self.ras_pol_dialog.pixelSizeYLineEdit.setEnabled(False)
        self.ras_pol_dialog.epsgCodeLabel.setEnabled(False)
        self.ras_pol_dialog.epsgCodeLineEdit.setEnabled(False)
        self.ras_pol_dialog.tiffUseCheckBox.setEnabled(False)
        self.ras_pol_dialog.openTiffCheckBox.setChecked(False)
        self.ras_pol_dialog.csv2tiffPushButton.setEnabled(False)
        
        self.ras_pol_dialog.inputRasterLayerComboBox.setCurrentText(None)
        self.ras_pol_dialog.inputRasterBandComboBox.setCurrentText(None)
        self.ras_pol_dialog.fieldNameLineEdit.setText("DN")
        self.ras_pol_dialog.eightConnectednessCheckBox.setChecked(False)
        self.ras_pol_dialog.outputVectorFileWidget.setFilePath(None)
        self.ras_pol_dialog.openVectorOutputCheckBox.setChecked(False)

    def upload_input_file(self):
        self.shapefilePath, shapefileType = QFileDialog.getOpenFileName(self.ras_pol_dialog,
                                                                        "Choose file",
                                                                        "", 
                                                                        "All files(*)") 
        
        if self.shapefilePath:
            input_list = self.ras_pol_dialog.inputLayerComboBox.additionalItems()
            input_list.append(self.shapefilePath)
            
            self.ras_pol_dialog.inputLayerComboBox.setAdditionalItems(input_list)
            self.ras_pol_dialog.inputLayerComboBox.setCurrentText(self.shapefilePath)

    def upload_raster_file(self):
        self.filePath, fileType = QFileDialog.getOpenFileName(self.ras_pol_dialog,"Choose file",
                                                              "", 
                                                              "TIFF Files (*.tiff);; TIF Files (*.tif);; All Files (*)") 
        
        if self.filePath:
            input_list = self.ras_pol_dialog.inputRasterLayerComboBox.additionalItems()
            input_list.append(self.filePath)
            
            self.ras_pol_dialog.inputRasterLayerComboBox.setAdditionalItems(input_list)
            self.ras_pol_dialog.inputRasterLayerComboBox.setCurrentText(self.filePath)
        else:
            pass

    def error_message(self, wrg):
        QMessageBox.warning(self.ras_pol_dialog.show(), self.tr("Error!"), self.tr(str(wrg)), QMessageBox.Ok)
    
    def success_message(self, msg):
        QMessageBox.information(self.ras_pol_dialog, self.tr("Succes!"), self.tr(str(msg)), QMessageBox.Ok)
   
    def unit_function(self):
        if self.ras_pol_dialog.outputUnitComboBox.currentText() == "Pixels":
            return 0
        else:
            return 1
    
    def band_function(self):
        if self.ras_pol_dialog.inputRasterBandComboBox.currentText() == "Band 1 (Red)":
            return 1 
        elif self.ras_pol_dialog.inputRasterBandComboBox.currentText() == "Band 2 (Green)": 
            return 2 
        elif self.ras_pol_dialog.inputRasterBandComboBox.currentText() == "Band 3 (Blue)":
            return 3
        elif self.ras_pol_dialog.inputRasterBandComboBox.currentText() == "Band 4 (Alpha)":
            return 4
        elif self.ras_pol_dialog.inputRasterBandComboBox.currentText() == "Band 1 (Gray)":
            return 1
        elif self.ras_pol_dialog.inputRasterBandComboBox.currentText() == "Band 2 (Alpha)":
            return 2
    
    def input_file_layer_fields(self):
        self.selected_layer = self.ras_pol_dialog.inputLayerComboBox.currentLayer()
        
        if self.selected_layer:
            self.ras_pol_dialog.inputFieldComboBox.setLayer(self.selected_layer)
        else:
            self.selected_path = self.ras_pol_dialog.inputLayerComboBox.currentText()
            self.layer_from_path = QgsVectorLayer(self.selected_path, "input vector file", "ogr")
            fields = self.layer_from_path.fields()
            self.ras_pol_dialog.inputFieldComboBox.setFields(fields)
    
    def input_raster_file_layer_bands(self):
        selected_layer = self.ras_pol_dialog.inputRasterLayerComboBox.currentLayer()
        
        if selected_layer:
            self.ras_pol_dialog.inputRasterBandComboBox.setLayer(selected_layer)
        else:
            selected_path = self.ras_pol_dialog.inputRasterLayerComboBox.currentText()

            layer_from_path = QgsRasterLayer(selected_path, "input raster file")

            if layer_from_path.isValid():
                band_count = layer_from_path.bandCount()
                bands = []
                for band in range(1, band_count + 1):
                    band_name = f"Band {band}"
                    bands.append(band_name)
            
            self.ras_pol_dialog.inputRasterBandComboBox.setLayer(layer_from_path)
                                    
    def toggle_input_field(self):
        if self.ras_pol_dialog.fieldUseCheckBox.isChecked():
            self.ras_pol_dialog.inputFieldComboBox.setEnabled(True)
        else:
            self.ras_pol_dialog.inputFieldComboBox.setEnabled(False)
    
    def toggle_upload_csv_file(self):
        toggle_value = self.ras_pol_dialog.csvUploadCheckBox.isChecked()

        self.ras_pol_dialog.csvFileLineEdit.setEnabled(toggle_value)
        self.ras_pol_dialog.csvFileToolButton.setEnabled(toggle_value)
        self.ras_pol_dialog.csvHeightLabel.setEnabled(toggle_value)
        self.ras_pol_dialog.csvWidthLabel.setEnabled(toggle_value)
        self.ras_pol_dialog.csvWidthLineEdit.setEnabled(toggle_value)
        self.ras_pol_dialog.csvHeightLineEdit.setEnabled(toggle_value)
        self.ras_pol_dialog.xValueLabel.setEnabled(toggle_value)
        self.ras_pol_dialog.yValueLabel.setEnabled(toggle_value)
        self.ras_pol_dialog.originXLineEdit.setEnabled(toggle_value)
        self.ras_pol_dialog.originYLineEdit.setEnabled(toggle_value)
        self.ras_pol_dialog.pixelSizeXLabel.setEnabled(toggle_value)
        self.ras_pol_dialog.pixelSizeYLabel.setEnabled(toggle_value)
        self.ras_pol_dialog.pixelSizeXLineEdit.setEnabled(toggle_value)
        self.ras_pol_dialog.pixelSizeYLineEdit.setEnabled(toggle_value)
        self.ras_pol_dialog.epsgCodeLabel.setEnabled(toggle_value)
        self.ras_pol_dialog.epsgCodeLineEdit.setEnabled(toggle_value)
        self.ras_pol_dialog.tiffUseCheckBox.setEnabled(toggle_value)
        self.ras_pol_dialog.openTiffCheckBox.setEnabled(toggle_value)
        self.ras_pol_dialog.csv2tiffPushButton.setEnabled(toggle_value)

    def run_rasterize(self):
        unit_value = self.unit_function()
        
        output_path = self.ras_pol_dialog.outputFileWidget.filePath()
        output_name_without_extention = os.path.splitext(os.path.basename(output_path))[0]

        selected_layer = self.ras_pol_dialog.inputLayerComboBox.currentLayer()
        
        if selected_layer:
            input_layer_path = selected_layer.source()
        else:
            input_layer_path = self.ras_pol_dialog.inputLayerComboBox.currentText()
        
        if self.ras_pol_dialog.fieldUseCheckBox.isChecked():
            field_name = self.ras_pol_dialog.inputFieldComboBox.currentText()
        else:
            field_name = None

        extra_params = []

        if self.ras_pol_dialog.allTouchedCheckBox.isChecked():
            extra_params.append('-at')

        extra_params_str = ' '.join(extra_params)

        parameters = {
            'INPUT': input_layer_path,
            'FIELD': field_name,
            'BURN': self.ras_pol_dialog.burnValueDSpinBox.value(),
            'USE_Z': self.ras_pol_dialog.useZCheckBox.isChecked(),
            'WIDTH': self.ras_pol_dialog.horizontalResDSpinBox.value(),
            'HEIGHT': self.ras_pol_dialog.verticalResDSpinBox.value(),
            'UNITS': unit_value,
            'NODATA': self.ras_pol_dialog.noDataDSpinBox.value(),
            'EXTENT': self.ras_pol_dialog.outputExtentLineEdit.text(),
            'INIT': None,
            'INVERT': self.ras_pol_dialog.invertCheckBox.isChecked(),
            'DATA_TYPE': 5,
            'EXTRA': extra_params_str,
            'OUTPUT': self.ras_pol_dialog.outputFileWidget.filePath()
        }

        parameters = {k: v for k, v in parameters.items()}
        
        try:
            processing.run("gdal:rasterize", parameters)
        except:
            self.error_message("Rasterize failed! (Check log messages.)")
        
        if self.ras_pol_dialog.openOutputCheckBox.isChecked():
            output_layer = self.iface.addRasterLayer(output_path, output_name_without_extention, "gdal")
            
            self.iface.setActiveLayer(output_layer)

        if os.path.exists(output_path):
            self.success_message("Rasterize completed successfully!")
            self.ras_pol_dialog.tiff2csvPushButton.setEnabled(True)
        else:
            self.error_message("Rasterize failed! (Check log messages.)")
        
    def run_polygonize(self):
        selected_layer = self.ras_pol_dialog.inputRasterLayerComboBox.currentLayer()

        output_path = self.ras_pol_dialog.outputVectorFileWidget.filePath()
        output_name_without_extention = os.path.splitext(os.path.basename(output_path))[0]

        if selected_layer:
            input_layer_path = selected_layer.source()
        else:
            input_layer_path = self.ras_pol_dialog.inputRasterLayerComboBox.currentText()
        
        band_value = self.band_function()

        parameters = {
            'INPUT': input_layer_path,
            'BAND': band_value,
            'FIELD': self.ras_pol_dialog.fieldNameLineEdit.text(),
            'EIGHT_CONNECTEDNESS': self.ras_pol_dialog.eightConnectednessCheckBox.isChecked(),
            'OUTPUT': self.ras_pol_dialog.outputVectorFileWidget.filePath(),
            'EXTRA' : None
        }
        
        parameters = {k: v for k, v in parameters.items()}
        
        try:
            processing.run("gdal:polygonize", parameters)
        except:
            self.error_message("Polygonize failed! (Check log messages.)")
        
        if self.ras_pol_dialog.openVectorOutputCheckBox.isChecked():
            output_layer = self.iface.addVectorLayer(output_path, output_name_without_extention, "ogr")
            
            self.iface.setActiveLayer(output_layer)
        
        if os.path.exists(output_path):
            self.success_message("Polygonize completed successfully!")
        else:
            self.error_message("Polygonize failed! (Check log messages.)")
    
    def calculate_layer_form_menu_action_function(self):
        self.ras_pol_dialog.calculate_from_layer_menu.clear()
        
        current_layers = QgsProject.instance().mapLayers().values()    
        
        if len(current_layers) != 0:
            for layer in current_layers:
                action = QAction(layer.name(), self.ras_pol_dialog.menu)
                self.ras_pol_dialog.calculate_from_layer_menu.addAction(action)
                action.triggered.connect(lambda checked, layer_name=layer.name(): self.activate_layer(layer_name))
        else:
            return None

    def calculate_from_active_layer_function(self):
        layer = self.iface.activeLayer()
        crs = layer.crs().authid()

        self.ras_pol_dialog.ext = layer.extent()
        
        self.ras_pol_dialog.xmin = self.ras_pol_dialog.ext.xMinimum()
        self.ras_pol_dialog.xmax = self.ras_pol_dialog.ext.xMaximum()
        self.ras_pol_dialog.ymin = self.ras_pol_dialog.ext.yMinimum()
        self.ras_pol_dialog.ymax = self.ras_pol_dialog.ext.yMaximum()
            
        coords = f"{self.ras_pol_dialog.xmin},{self.ras_pol_dialog.xmax},{self.ras_pol_dialog.ymin},{self.ras_pol_dialog.ymax} [{crs}]"
            
        self.ras_pol_dialog.outputExtentLineEdit.setText(coords)
    
    def activate_layer(self, layer_name):
        choosed_layer = QgsProject.instance().mapLayersByName(layer_name)[0]
        self.iface.setActiveLayer(choosed_layer)

        self.calculate_from_active_layer_function()

    def use_map_canvas_extent_function(self):
        canvas = self.iface.mapCanvas()

        self.ras_pol_dialog.ext = canvas.extent()
        
        self.ras_pol_dialog.xmin = self.ras_pol_dialog.ext.xMinimum()
        self.ras_pol_dialog.xmax = self.ras_pol_dialog.ext.xMaximum()
        self.ras_pol_dialog.ymin = self.ras_pol_dialog.ext.yMinimum()
        self.ras_pol_dialog.ymax = self.ras_pol_dialog.ext.yMaximum()
            
        coords = f"{self.ras_pol_dialog.xmin},{self.ras_pol_dialog.xmax},{self.ras_pol_dialog.ymin},{self.ras_pol_dialog.ymax}"
            
        self.ras_pol_dialog.outputExtentLineEdit.setText(coords)
        
    def calculate_width_height(self):
        try:
            xmin = self.ras_pol_dialog.xmin
            xmax = self.ras_pol_dialog.xmax
            ymin = self.ras_pol_dialog.ymin
            ymax = self.ras_pol_dialog.ymax

            width =  self.ras_pol_dialog.horizontalResDSpinBox.value()
            height =  self.ras_pol_dialog.verticalResDSpinBox.value()

            if self.ras_pol_dialog.outputUnitComboBox.currentText() == "Georeferenced units":
                width_extent = xmax - xmin
                height_extent = ymax - ymin

                self.WIDTH = width_extent / width
                self.HEIGHT = height_extent / height
 
                self.WIDTH = round(self.WIDTH)
                self.HEIGHT = round(self.HEIGHT)

                self.ras_pol_dialog.resTextEdit.setText(f"WIDTH: {self.WIDTH}\nHEIGHT: {self.HEIGHT}")
            else:
                self.WIDTH = int(width)
                self.HEIGHT = int(height)
                    
                self.ras_pol_dialog.resTextEdit.setText(f"WIDTH: {self.WIDTH}\nHEIGHT: {self.HEIGHT}")
        except:
            self.ras_pol_dialog.resTextEdit.setText(f"Can't calculate!\n(you need the extent value, and height or width value cannot be zero)")
    
    def run_button_clicked(self):
        current_widget = self.ras_pol_dialog.tabWidget.currentWidget()
    
        if current_widget.objectName() == 'rasterizeTab':
            self.run_rasterize()
        elif current_widget.objectName() == 'polygonizeTab':
            self.run_polygonize()

    def run_tiff2csv(self):
        output_path = self.ras_pol_dialog.outputFileWidget.filePath()
        output_path_without_extension = os.path.splitext(output_path)[0]
    
        if os.path.exists(output_path):
            converter = TIFFToCSVConverter(file=f"{output_path_without_extension}.tiff", output=f"{output_path_without_extension}")
            converter.convert()
                
            if os.path.exists(f"{output_path_without_extension}.csv"):
                self.success_message("Conversion completed successfully!")
            else:
                self.error_message("Conversion failed!")
        else:
            self.error_message("Output file not found!")

    def get_csv2tiff_parameters(self):
        csv_file_path = self.ras_pol_dialog.csvFileLineEdit.text()
        csv_file_name_without_extention = os.path.splitext(os.path.basename(csv_file_path))[0]
        
        json_directory = os.path.dirname(csv_file_path)
        json_file_path = os.path.join(json_directory, f"{csv_file_name_without_extention}.json")
        
        if os.path.exists(json_file_path):
            with open(json_file_path, 'r') as json_file:
                metadata = json.load(json_file)

                width = metadata.get("width")
                height = metadata.get("height")
                
                self.minx = metadata.get("xmin")
                self.maxy = metadata.get("ymax")
                self.epsg = metadata.get("epsg")
                self.pixel_size_x = metadata.get("pixel_size_x")
                self.pixel_size_y = metadata.get("pixel_size_y")

                self.ras_pol_dialog.csvWidthLineEdit.setText(str(width) if width is not None else None)
                self.ras_pol_dialog.csvHeightLineEdit.setText(str(height) if height is not None else None)
                self.ras_pol_dialog.pixelSizeXLineEdit.setText(str(self.pixel_size_x) if self.pixel_size_x is not None else None)
                self.ras_pol_dialog.pixelSizeYLineEdit.setText(str(self.pixel_size_y) if self.pixel_size_y is not None else None)
                self.ras_pol_dialog.originXLineEdit.setText(str(self.minx) if self.minx is not None else None)
                self.ras_pol_dialog.originYLineEdit.setText(str(self.maxy) if self.maxy is not None else None)
                self.ras_pol_dialog.epsgCodeLineEdit.setText(str(self.epsg) if self.epsg is not None else None)
        else:
            self.ras_pol_dialog.csvWidthLineEdit.setText(None)
            self.ras_pol_dialog.csvHeightLineEdit.setText(None)
    
    def csv_file_sec(self):
        self.csv_file_path, self.csv_file_type = QFileDialog.getOpenFileName(self.ras_pol_dialog, "Choose file",
                                                                             "",
                                                                             "CSV Files (*.csv);; All Files (*)") 
        
        if self.csv_file_path:
            self.ras_pol_dialog.csvFileLineEdit.setText(self.csv_file_path)

    def run_csv2tiff(self):
        width = int(self.ras_pol_dialog.csvWidthLineEdit.text())
        height = int(self.ras_pol_dialog.csvHeightLineEdit.text())
        pixel_size_x = float(self.ras_pol_dialog.pixelSizeXLineEdit.text()) if self.ras_pol_dialog.pixelSizeXLineEdit.text() != "" else 1000
        pixel_size_y = float(self.ras_pol_dialog.pixelSizeYLineEdit.text()) if self.ras_pol_dialog.pixelSizeYLineEdit.text() != "" else -1000
        minx = float(self.ras_pol_dialog.originXLineEdit.text()) if self.ras_pol_dialog.originXLineEdit.text() != "" else 0.0
        maxy = float(self.ras_pol_dialog.originYLineEdit.text()) if self.ras_pol_dialog.originYLineEdit.text() != "" else 0.0
        epsg = int(self.ras_pol_dialog.epsgCodeLineEdit.text()) if self.ras_pol_dialog.epsgCodeLineEdit.text() != "" else 4326
        
        csv_file_path = self.ras_pol_dialog.csvFileLineEdit.text()
        
        csv_file_path_without_extention = os.path.splitext(csv_file_path)[0]
        csv2tiff_output_path = f"{csv_file_path_without_extention}_converted"
        tiff_file_path = f"{csv2tiff_output_path}.tiff"
        tiff_file_name = os.path.basename(tiff_file_path).split('.')[0]
        
        if os.path.exists(csv_file_path):
            converter = CSVToGeoTIFFConverter(file=csv_file_path, output=tiff_file_path, width=width, height=height, pixel_size_x=pixel_size_x, pixel_size_y=pixel_size_y, minx=minx, maxy=maxy, epsg=epsg)
            converter.convert()
            
            if os.path.exists(tiff_file_path):
                self.success_message("Conversion completed successfully!")
            
                if self.ras_pol_dialog.tiffUseCheckBox.isChecked():
                    input_list = self.ras_pol_dialog.inputRasterLayerComboBox.additionalItems()
                    input_list.append(tiff_file_path)
            
                    self.ras_pol_dialog.inputRasterLayerComboBox.setAdditionalItems(input_list)
                    self.ras_pol_dialog.inputRasterLayerComboBox.setCurrentText(tiff_file_path)

                    self.input_raster_file_layer_bands()

                if self.ras_pol_dialog.openTiffCheckBox.isChecked():
                    converted_layer = self.iface.addRasterLayer(tiff_file_path, tiff_file_name, "gdal")
                    
                    self.iface.setActiveLayer(converted_layer)
                else:
                    pass
            else:
                self.error_message("Conversion failed!")
        else:
            self.error_message("Output file not found!")
    
    def create_json_metadata(self):   
        output_path = self.ras_pol_dialog.outputFileWidget.filePath()
        output_name_without_extention = os.path.splitext(os.path.basename(output_path))[0]
        
        raster_layer_from_path = QgsRasterLayer(output_path, "input raster file")

        json_directory = os.path.dirname(output_path)

        raster_layer_crs = self.selected_layer.crs().authid()
        extent_raster = raster_layer_from_path.extent()
        xmin = extent_raster.xMinimum()
        ymax = extent_raster.yMaximum()
    
        crs_number = raster_layer_crs.split(':')[1]

        raster_layer_from_path = QgsRasterLayer(output_path, "input raster file")

        width = raster_layer_from_path.width()
        height = raster_layer_from_path.height()
        
        
        pixel_size_x = raster_layer_from_path.rasterUnitsPerPixelX()
        pixel_size_y = raster_layer_from_path.rasterUnitsPerPixelY()
        pixel_size_y = -pixel_size_y
        
        self.json_file = os.path.join(json_directory, f"{output_name_without_extention}.json")
        
        metadata = { 
            "width": width,
            "height": height,
            "xmin": xmin,
            "ymax": ymax,
            "epsg": crs_number,
            "pixel_size_x": pixel_size_x,
            "pixel_size_y": pixel_size_y,
        }
        
        with open(self.json_file, 'w') as f:
            json.dump(metadata, f, indent=4)

    def close_plugin(self):
        self.ras_pol_dialog.close()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            
            self.ras_pol_dialog.inputFileToolButton.clicked.connect(self.upload_input_file)
            self.ras_pol_dialog.closePushButton.clicked.connect(self.close_plugin)
            self.ras_pol_dialog.inputLayerComboBox.layerChanged.connect(self.input_file_layer_fields)
            self.ras_pol_dialog.inputFileToolButton.clicked.connect(self.input_file_layer_fields)
            self.ras_pol_dialog.fieldUseCheckBox.stateChanged.connect(self.toggle_input_field)
            self.ras_pol_dialog.horizontalResDSpinBox.valueChanged.connect(self.calculate_width_height)
            self.ras_pol_dialog.verticalResDSpinBox.valueChanged.connect(self.calculate_width_height)
            self.ras_pol_dialog.outputExtentLineEdit.textChanged.connect(self.calculate_width_height)
            self.ras_pol_dialog.outputUnitComboBox.currentIndexChanged.connect(self.calculate_width_height)
            self.ras_pol_dialog.tiff2csvPushButton.clicked.connect(self.run_tiff2csv)
            self.ras_pol_dialog.tiff2csvPushButton.clicked.connect(self.create_json_metadata)

            self.ras_pol_dialog.csvUploadCheckBox.stateChanged.connect(self.toggle_upload_csv_file)
            self.ras_pol_dialog.csvFileToolButton.clicked.connect(self.csv_file_sec)
            self.ras_pol_dialog.inputRasterToolButton.clicked.connect(self.upload_raster_file)
            self.ras_pol_dialog.inputRasterLayerComboBox.layerChanged.connect(self.input_raster_file_layer_bands)
            self.ras_pol_dialog.inputRasterToolButton.clicked.connect(self.input_raster_file_layer_bands)
            self.ras_pol_dialog.csvFileToolButton.clicked.connect(self.get_csv2tiff_parameters)
            self.ras_pol_dialog.csv2tiffPushButton.clicked.connect(self.run_csv2tiff)
            
            self.ras_pol_dialog.runPushButton.clicked.connect(self.run_button_clicked)
        
        self.calculate_layer_form_menu_action_function()
        self.ras_pol_dialog.outputExtentLineEdit.clear()
        self.ras_pol_dialog.resTextEdit.clear()
        
        self.reset_widgets()

        # show the dialog
        self.ras_pol_dialog.show()
        # Run the dialog event loop
        result = self.ras_pol_dialog.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
